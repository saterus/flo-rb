#!/usr/bin/env ruby

require "thor"
require_relative "../lib/flo"

class FloCLI < Thor
  class_option :host, default: "localhost", aliases: :H
  class_option :port, default: 3000, type: :numeric, aliases: :p

  desc "produce", "NAMESPACE STDIN"
  option :parent, aliases: :P, banner: "COUNTER.ACTOR"
  option :event_data, aliases: :d
  def produce(namespace)
    setup_cluster_address

    data = options.fetch(:event_data) { $stdin.read }
    parent = Flo::EventId.parse(options[:parent])

    Flo.client do |client|
      puts client.produce(namespace, data, parent: parent)
    end
  end

  desc "consume", "Used to read events from the stream"
  option :limit, type: :numeric, aliases: :l
  option :start_after, type: :numeric, aliases: :s, banner: "COUNTER.ACTOR"
  option :tail, type: :boolean, aliases: :t
  option :namespace, aliases: :n, default: "/**/*"
  def consume()
    puts "consuming"
  end

  private

  def setup_cluster_address
    Flo.config do |c|
      c.host = options[:host]
      c.port = options[:port]
    end
  end

end

FloCLI.start(ARGV)
